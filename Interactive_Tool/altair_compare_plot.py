
import altair as alt

'''
Input:  df_plot, selected_model, scale_color, title

Ex:
model_key = ['XGB Classifier', 'Random Forest Classifier', 'Logistic Regression']

selected_model  = model_key[0]
title           = 'Synthetic data generated by Covariance'
scale_color     = alt.Scale(domain=["Original Covariance",
                                    "interventional less-correlated Covariance"], 
                            range=['#aec7e8','#9467bd'])

Output: Comparison_altair_plot - bar, line, stack_bars
'''


def plot_comparison(df_plot, selected_model, scale_color, title=''):
    # Comparative Bar
    bar = alt.Chart(height=280, width=80, title=title).mark_bar().encode(
        x=alt.X('Synthetic_type', axis=None),
        y=alt.Y(selected_model, axis=alt.Axis(grid=False),
                title='SHAP Explained Feature Importance'),
        color=alt.Color('Synthetic_type', scale=scale_color),
        column=alt.Column('features'),
        tooltip=[selected_model, 'Synthetic_type']
    ).resolve_scale(
        x='independent'
    ).interactive()

    # Line with points
    line = alt.Chart().mark_line(point=True).encode(
        x=alt.X('features', axis=alt.Axis(labelAngle=0)),
        y=alt.Y(selected_model, title='SHAP Explained Feature Importance'),
        color=alt.Color('Synthetic_type', scale=scale_color,
                        legend=alt.Legend(title="Synthetic_type")),
        tooltip=[selected_model, 'Synthetic_type']
    ).properties(
        height=280, width=700
    ).interactive()

    # Stack bar chart
    stack_bars = alt.Chart(height=200, width=700).mark_bar().encode(
        x=alt.X(selected_model, title='SHAP Explained Feature Importance'),
        y="features",
        color=alt.Color('Synthetic_type', scale=scale_color),
        tooltip=[selected_model, 'Synthetic_type']
    ).interactive()

    return alt.vconcat(bar, line, stack_bars, data=df_plot).configure_view(stroke='transparent')
